框架技术
Struts2
hibernate
spring
spring mvc
mybatis

1 不用框架
1)整个工作流程 由一个人全程
2)效率低下

用框架
1)安全
2)效率高

1 struts2:是一种框架技术:是对servlet的一种封装
1)优化了servlet/jsp 数据转向和传递的方便性
2)struts2自己提供了简单的标签,可以快速的开发view层

1-jsp发action
2-struts拦截请求,
3-struts会有返回结果,会指向某个jsp

拦截器:
 1 只对action有效果,触发一个事件
 /st   只要url遇到/st都会拦截
 2 拦截器可访问action上下文
 3 action看成处理数据的一个类
过滤器:
 1 在web.xml中配置filter,配置好后才会走过滤器
 2 过滤器依赖servlet



导包:
1 commons-fileupload-1.2.1 文件上传
2 struts2-core-2.1.8 struts2核心包
3 xwork-core-2.1.6 struts2核心包 基于web开发
4 ognl-2.7.3 struts标签ognl
5 jta-1.1 事物管理(保证事物完整性)如果整个事情没有完整,就返回上一步

提交:让事物管理提交,保证数据最新,数据完成并跟新
数据库提交:让此时操作的数据更新到,别人看到的也是最新数据

过滤器:在web.xml配置

struts2中值传递
1 属性(变量) 注入
 	1)在jsp页面 input name="zname"
 	2)在HAction 对zname get set方法
 	3)jsp页面通过el表达式${zname}
2 域传递--当有很多属性时,把属性封装成一个类的方式 ,以类来进行操作

---
ognl 是struts 提供的标签库 类似于el表达式

优点
1 简化页面的代码开发 提升效率
2 是struts提供的表达式




JDBC访问
缺点:
1 字段
2 java类的属性

hibernate:
1 是一种框架技术
2 对jdbc的一种封装,数据访问层的框架,主要是把数据表中的字段对应到对象的属性,操作对象的属性可操作到表中的字段值
3 可统一通过java代码来实现

优势
1)以前jdbc,java代码中混有sql,有时赋值,转值,连接,比较麻烦
2)不用放到result set 直接通过java代码使用
3)每种数据库要有自己的连接,不通用


orm思想
o object 对象
r relation 关联
m mapping 映射

bao:
hibernate3.jar   hibernate3-tools 功能包
antlr 操作hql
asm 操作java class
junit 用于单元测试


用hibernate操作表

create table em2(
 	id number(8),
 	name varchar2(30),
 	primary key(id)
);

连接数据库 是需要配置xml文件


数据insert进入库
Em2.java 实体类
Em2.hbm.xml 映射文件


<hibernate-mapping>
    <class name="ent.Em2" table="EM2" schema="SYSTEM">
        <id name="id" type="java.lang.Integer">
            <column name="ID" precision="8" scale="0" />
            <generator class="assigned" />
        </id>
        <property name="name" type="java.lang.String">
            <column name="NAME" length="30" />
        </property>
    </class>
</hibernate-mapping>

class-name 对应的是实体类Em2.java文件
table="EM2" 数据库中的表
column name="ID" 类中的id
column name="NAME" 字段名

precision="8" scale="0"定义字段长度,最大8,最小0

generator class="assigned"
生成主键方式
uuid navite assigned
uuid 系统生成
navite 数据库生成
assigned 手动


单元测试@Test放到此方法上
查询时,load get
延迟加载(懒加载):为了提高新能,所谓延迟加载当真正要用数据时,才去执行数据的加载操作

get:
1)先到缓存中查数据,如果缓存中没有,再到数据库中去找
2)如果找不到,  

load:
1)先去缓存中查数据,如果缓存中没有,再用代理,再去找数据库
2)找不到数据就会抛异常

一般开发时,用get多一点
不管是get,load,都是通过id去查询
非id的条件查询
1)hql(hibernate query language)
 	针对类 对象的查询,类似于sql(数据库的查询 表名 字段名)区别大小写 用的是类名 属性名    
 	从from开始
2)criteria
 	查询采用的是面向对象封装的方式,以为对象查询,提供了一个Criteria
 	
 	
type对应的类型
整数byte short Integer long
小数 float double
字符串 String
日期 Date
布尔 yes_no  对应的值是true_false





hibernate:
是对jdbc的封装,是数据访问层的一种框架技术

优势:
1 以前是边写sql,边写java代码,现可以统一写java
2 以前sql变量赋值,拼接并查出来的值,还要传入resultset,再传入java集合
3 以前各种数据库,连接方式不同

用法:
1 导包
2 hibernate.cfg.xml 配置好session-factory中数据库连接信息
3 session-factory--getsession-取到连接
 	代理工厂模式, 通过配置文件创立连接
 	相当与jdbc-connection
 	
 	
hibernate 缓存机制:
内存:cpu不能直接操作硬盘中的数据,先把硬盘中数据放到内存中去
缓存也是内存的一部分,针对每个数据,第二次访问时,第一回访问内存
如果有此数据,对于第二回来说,第一回数据时缓存

用缓存优点:
1 减少了数据库访问次数
2 提高代码的效率
3 一级缓存是默认开启的

一级缓存:
1) hibernate创建一个session(连接会话)时,每个session会分配一个空间,用于保留第一回查询到的数据,第二回查询到的数据就用到缓存了
hibernate中的session是一次连接会话,含封装的增删改查操作数据库的方法(不是jsp那个httpSession)
2)是用session来管理的
当Session open时,缓存就打开
当Session close时,缓存就关闭
当第一次加载数据之后的,之后的多次加载时基于缓存的
开发时,Session一般都是open

二级缓存:
1 以缓存中的数据来查看数据
2 通过SessionFactory来管理
 	二级缓存随着SessionFactory的打开而打开,关闭而关闭
3 可通过id来查询缓存中数据
设置class-cache
再通过query-cache去查询
4 二级缓存是属于进程范围内的缓存





pring:
是一个比较轻量级的框架,目的是降低开发的复杂度.
作用 优势:
1 管理组件,管理组件与组件的关系
组件:每个独立的类,并含相应的方法
2 AOP 面向切面
 	让一批组件去处理些通用的业务
3 整合别的框架
 	spring 可整合struts hibernate mybatis
 	降低耦合度
4 提供了spring mvc(分层)

怎么用spring
1.导包lib_sp;
2.applicationContext.xml
 	beans 多个组件
3 对一个实体类操作

id="costDao" class="dao.HiCostDaoImpl"是一种依赖关系

IOC 控制反转:
让业务代码交出对象的控制权
原先的主动创建对象,变为有spring管理组件的方式得到对象
spring采用xml来管理对象的控制权


依赖:id/name="xx" class/ref="com.yyDao"

注入:别的类(组件)可注入当成我的属性
<bean id=" " class=" ">
 	<property name=" " class=" "/>
</bean>
<bean name=" "></bean>

注入方式:
1 set注入
 	1)先定义好组件
 	2)在配置文件中以<property注入
 	3)加上get set方法
2 构造器注入
3 属性注入
4 注释注入()



 spring:
轻量级框架,降低开发的复杂度

IOC:控制反转
是一种设计思想,目的是把业务代码的控制权,让spring通过,xml来通过组件管理

依赖:bean的id名,会指定对应的class
注入:
1 set注入:
 	1) 写明组件
 	2) 先在xml组件中,通过<property 注入另一组件
 	3) 在action 用此组件名,再get set
2 构造器注入
 	1) 先在配置文件中,先要声明构造器注入方式
 	2) 写构造器,通过参数引入
3 属性注入
  	1)先在配置文件中,先要同<property 引入属性,并赋值
  	2)在bean组件类中,要get set
4 注释注入
 	1)通过注释的方式也可配置,对组件的引用和注入
 	
AOP 面向切面的编程(Aspect Oriented Programming)
主要数对oop(面向对象)的补充
面向对象 (封装 继承 多态)只能纵向,不能横向
目前oop,目前代码设计还会有冗余

AOP :称为横切的一种技术
可影响多个类的公共行为,封装些可重用的功能,可重用的功能为切面(Aspect)
简单的说:把很多并没有业务关联的类,把这些共用的功能,封装起来
给相关类使用,可减少重复代码,降低耦合度


AOP有关概念
1 横切关注点(pointcut)
	对哪些方法进行拦截,拦截后怎么处理--这是关注点 都是横切关注点
2 切面(acpect)
	关注点对应抽象体(对应的类),类就是物是抽象概念
3 连接点
	连接点可为字段,属性 构造器
	在spring连接点,指被拦截到的方法
4 切入点
	对连接点的定义,
-----------

程序执行
本身那个方法是需要时间的

关注点之前,就是调用公共功能
关注点之后,就是调用公共功能

aop开发,配置文件
1 bean
2 :aop配置<aop:config>




spring mvc:
1	基于servlet
2	并对其封装,并提出mvc实现技术

实现原理:
1从页面的请求--发给控制器
 spring基于servlet,提供了控制器
 DispatcherServlet
 相当于struts2的filter 相当于到了servlet service
2 控制器再通过spring提供了
handleMapping 找到其对应的方法(action)
handleMapping是spring配置文件一段配置
相当于struts action配置
3 实现业务
	调用组件(Controller 负责组件调用)
4 转向到页面,并传入数据
	spring也提供了viewResolver来实现转发
 相当于struts return "succ"--对result,转向页面
 
spring mvc开发过程
1 导包
2 在web.xml文件中配置spring DispatcherServlet
  src applicationContext.xml文件先放到src
  classPath对应的就是src
3 建立好Controller



oracle
用sql
hibernate
用hql 操作类与属性

mybatis
支持sql查询的一种映射关系的持久层框架

把sql写到其对应的配置文件中

方法--和方法的调用 映射
优势:
1 目前提供了三种语言的版本
  java .net ruby
2 mybatis和hibernate比起来
    半自动的orm实现
  mybatis还是写sql,只是sql写在项目中的配置文件中
   不在写在数据库中
3 是一种持久层框架

单表
一对一
一对多

通过mybatis开发项目
1 建立项目，导入相应的包
  核心包 mybatis_3
2 建立一个表
  t_users;
  create table t_users(
   id number(8),
   username varchar2(20),
   password varchar2(20),
   account number(8,2),
   primary key(id)
  );
  create sequence t_users_seq;
3 先通过cfg.xml配置文件连上db
    
  com.util
  com.action
  com.bean 
  com.mapper(映射关联文件--方法---方法的调用 名字要配对)
  
  util中，有个DB类，连接数据库
  
  mapper:
    方法文件--接口--方法名要对应到配置文件


